{{- if .Values.monitoring.enabled }}
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: monitoring
  namespace: {{ .Release.Namespace }}
spec:
  targetNamespace: monitoring
  chart:
    spec:
      chart: {{ .Values.monitoring.git.path }}
      interval: 5m
      sourceRef:
        kind: GitRepository
        name: monitoring
        namespace: {{ .Release.Namespace }}

  {{- with .Values.flux }}
  interval: {{ .interval }}
  test:
    enable: false
  install:
    remediation:
      retries: {{ .install.retries }}
  upgrade:
    remediation:
      retries: {{ .upgrade.retries }}
      remediateLastFailure: true
    cleanupOnFail: true
  rollback:
    timeout: {{ .rollback.timeout }}
    cleanupOnFail: {{ .rollback.cleanupOnFail }}
  {{- end }}

  valuesFrom:
    - name: values
      kind: Secret
      valuesKey: "monitoring.yaml"

  values:
    hostname: {{ .Values.hostname }}
    istio:
      enabled: {{ .Values.istio.enabled }}
    global:
      imagePullSecrets:
        - name: private-registry
    kubePrometheusStack:
      grafana:
        image:
          pullSecrets:
          - private-registry
        {{- if .Values.monitoring.sso.enabled }}
        envFromSecret: {{ .Values.monitoring.sso.idc_client_secret }}
        grafana.ini:
          server:
            # The root URL must be set with the proper url to enable oauth login
            root_url: https://grafana.{{ .Values.hostname }}
          auth:
            # URL to redirect the user to after sign out
            signout_redirect_url: {{ .Values.monitoring.sso.idc_client_secret }}
          auth.generic_oauth:
            enabled: true
            client_id: ${CLIENT_ID}
            # Some IDC configuration do not require a client secret.  If required, uncomment below and add the
            # secret to the encrypted secrets file which is load in the "envFromSecret" paramter above
            #client_secret:
            client_secret: ${CLIENT_SECRET}
            # Some IDCs have different scope values.   Common ones are commented below but login.dsp.io uses a
            # grafana scope
            # scopes: openid profile email
            scopes: Grafana
            auth_url: {{ .Values.monitoring.sso.auth_url }}
            token_url: {{ .Values.monitoring.sso.token_url }}
            api_url: {{ .Values.monitoring.sso.api_url }}
            allow_sign_up: true
            role_attribute_path: Viewer
        {{- end }}

    prometheus-node-exporter:
      serviceAccount:
        imagePullSecrets:
        - name: private-registry
    kube-state-metrics:
      imagePullSecrets:
      - name: private-registry

  # TODO: DRY this up
  {{- if or .Values.gatekeeper.enabled .Values.istio.enabled }}
  dependsOn:
  {{- if .Values.istio.enabled }}
    - name: istio
      namespace: {{ .Release.Namespace }}
  {{- end }}
  {{- if .Values.gatekeeper.enabled }}
    - name: gatekeeper
      namespace: {{ .Release.Namespace }}
  {{- end }}
  {{- end }}
{{- end }}