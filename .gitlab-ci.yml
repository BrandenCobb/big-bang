stages:
  - infra
  # - deploy
  # - test
  # - cleanup
  - package tests

# Start with all in one
# break down into infra setup (pass kubeconfig), install, test, cleanup

# Setup Infra
infra:
  stage: infra
  tags:
  - bigbang
  - privileged
  - public
  image: registry.access.redhat.com/ubi8/ubi:8.2
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://localhost:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "" 
  script:
    - echo "Installing wget npm git and docker-ce-cli"
    - yum -y install wget npm git gettext > /dev/null && wget https://download.docker.com/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo > /dev/null && yum -y install docker-ce-cli > /dev/null && yum -y clean all > /dev/null
    - wget -q -O /usr/local/bin/k3d "https://github.com/rancher/k3d/releases/download/v3.1.5/k3d-linux-amd64" && chmod +x /usr/local/bin/k3d
    - wget -q -O /usr/local/bin/kubectl "https://storage.googleapis.com/kubernetes-release/release/v1.19.3/bin/linux/amd64/kubectl" && chmod +x /usr/local/bin/kubectl
    # Starting dnsmasq for cluster dns resolution
    - docker run -d -p 53:53/udp -p 53:53 janeczku/go-dnsmasq:latest
    - echo "nameserver 127.0.0.1" >> /etc/resolv.conf

    # Inject image pull secrets into k3d
    - envsubst < tests/registries.yaml.template > tests/registries.yaml

    # Standup cluster
    - export KUBECONFIG=k3d.conf
    - k3d cluster create umbrella --volume ${PWD}/tests/registries.yaml:/etc/rancher/k3s/registries.yaml --k3s-server-arg "--disable=traefik" --k3s-server-arg "--disable=metrics-server" -p 80:80@loadbalancer -p 443:443@loadbalancer --wait --agents 1 --servers 1
    - while ! (kubectl get node | grep "agent" > /dev/null); do sleep 3; done
    - kubectl get nodes
    - k3d node list
  artifacts:
    paths:
      k3d.conf

package tests:
  stage: package tests
  tags:
    - bigbang
    - privileged
    - public
  image: registry.access.redhat.com/ubi8/ubi:8.2
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://localhost:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""

  before_script:
    # Downloading Tools needed for cluster creation
    - curl -s https://toolkit.fluxcd.io/install.sh | bash
    - wget -q -O /usr/local/bin/kubectl "https://storage.googleapis.com/kubernetes-release/release/v1.19.3/bin/linux/amd64/kubectl" && chmod +x /usr/local/bin/kubectl
    - wget -q "https://get.helm.sh/helm-v3.4.0-linux-amd64.tar.gz" && tar xzf helm-v3.4.0-linux-amd64.tar.gz -C /usr/local/bin/ --strip-components 1 && chmod +x /usr/local/bin/helm
    
  script:
    # Place kubernetes package test here
        # Install Flux
    - which flux
    - flux install --timeout 3m0s
    - while ! (kubectl get ns,pods,hr,gitrepositories -A); do sleep 3; done
    # Install Big Bang
    - helm upgrade -i bigbang chart -n flux-system 
    # Wait for healthy
    - sleep 5
    - kubectl get ns,pods,hr,gitrepositories -A
    - kubectl wait --for=condition=Ready --timeout 30s helmrelease -n flux-system bigbang-certmanager
    - kubectl wait --for=condition=Ready --timeout 300s helmrelease -n flux-system bigbang-gatekeeper
    - kubectl wait --for=condition=Ready --timeout 300s helmrelease -n flux-system bigbang-istio-operator
    - kubectl wait --for=condition=Ready --timeout 300s helmrelease -n flux-system bigbang-istio
    - kubectl wait --for=condition=Ready --timeout 300s helmrelease -n flux-system bigbang-eck-operator
    - kubectl wait --for=condition=Ready --timeout 300s helmrelease -n flux-system bigbang-logging-operator
    - kubectl wait --for=condition=Ready --timeout 300s helmrelease -n flux-system bigbang-efk
    - kubectl wait --for=condition=Ready --timeout 300s helmrelease -n flux-system bigbang-twistlock
    - echo "Package tests go here"
    - kubectl get hr -A

  after_script:
    # Delete Cluster
    - k3d cluster delete umbrella
